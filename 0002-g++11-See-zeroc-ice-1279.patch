diff --git a/cpp/src/slice2js/Gen.cpp b/cpp/src/slice2js/Gen.cpp
index 8302d38e89..7af3fdbcc0 100644
--- a/cpp/src/slice2js/Gen.cpp
+++ b/cpp/src/slice2js/Gen.cpp
@@ -982,56 +982,56 @@ Slice::Gen::RequireVisitor::writeRequires(const UnitPtr& p)
 {
     vector<string> seenModules;
 
-    map<string, vector<string> > requires;
+    map<string, vector<string> > jsRequires;
     if(_icejs)
     {
-        requires["Ice"] = vector<string>();
+        jsRequires["Ice"] = vector<string>();
 
         //
         // Generate require() statements for all of the run-time code needed by the generated code.
         //
         if(_seenClass || _seenObjectSeq || _seenObjectDict)
         {
-            requires["Ice"].push_back("Ice/Object");
+            jsRequires["Ice"].push_back("Ice/Object");
         }
         if(_seenClass)
         {
-            requires["Ice"].push_back("Ice/ObjectPrx");
+            jsRequires["Ice"].push_back("Ice/ObjectPrx");
         }
         if(_seenOperation)
         {
-            requires["Ice"].push_back("Ice/Operation");
+            jsRequires["Ice"].push_back("Ice/Operation");
         }
         if(_seenStruct)
         {
-            requires["Ice"].push_back("Ice/Struct");
+            jsRequires["Ice"].push_back("Ice/Struct");
         }
 
         if(_seenLocalException || _seenUserException)
         {
-            requires["Ice"].push_back("Ice/Exception");
+            jsRequires["Ice"].push_back("Ice/Exception");
         }
 
         if(_seenEnum)
         {
-            requires["Ice"].push_back("Ice/EnumBase");
+            jsRequires["Ice"].push_back("Ice/EnumBase");
         }
 
         if(_seenCompactId)
         {
-            requires["Ice"].push_back("Ice/CompactIdRegistry");
+            jsRequires["Ice"].push_back("Ice/CompactIdRegistry");
         }
 
-        requires["Ice"].push_back("Ice/Long");
-        requires["Ice"].push_back("Ice/HashMap");
-        requires["Ice"].push_back("Ice/HashUtil");
-        requires["Ice"].push_back("Ice/ArrayUtil");
-        requires["Ice"].push_back("Ice/StreamHelpers");
+        jsRequires["Ice"].push_back("Ice/Long");
+        jsRequires["Ice"].push_back("Ice/HashMap");
+        jsRequires["Ice"].push_back("Ice/HashUtil");
+        jsRequires["Ice"].push_back("Ice/ArrayUtil");
+        jsRequires["Ice"].push_back("Ice/StreamHelpers");
     }
     else
     {
-        requires["Ice"] = vector<string>();
-        requires["Ice"].push_back("ice");
+        jsRequires["Ice"] = vector<string>();
+        jsRequires["Ice"].push_back("ice");
     }
 
     StringList includes = p->includeFiles();
@@ -1042,19 +1042,19 @@ Slice::Gen::RequireVisitor::writeRequires(const UnitPtr& p)
         {
             if(!_icejs && iceBuiltinModule(*j))
             {
-                if(requires.find(*j) == requires.end())
+                if(jsRequires.find(*j) == jsRequires.end())
                 {
-                    requires[*j] = vector<string>();
-                    requires[*j].push_back("ice");
+                    jsRequires[*j] = vector<string>();
+                    jsRequires[*j].push_back("ice");
                 }
             }
             else
             {
-                if(requires.find(*j) == requires.end())
+                if(jsRequires.find(*j) == jsRequires.end())
                 {
-                    requires[*j] = vector<string>();
+                    jsRequires[*j] = vector<string>();
                 }
-                requires[*j].push_back(changeInclude(*i, _includePaths));
+                jsRequires[*j].push_back(changeInclude(*i, _includePaths));
             }
         }
     }
@@ -1076,7 +1076,7 @@ Slice::Gen::RequireVisitor::writeRequires(const UnitPtr& p)
         _out << nl << "var __M = require(\"../Ice/ModuleRegistry\").Ice.__M;";
     }
 
-    for(map<string, vector<string> >::const_iterator i = requires.begin(); i != requires.end(); ++i)
+    for(map<string, vector<string> >::const_iterator i = jsRequires.begin(); i != jsRequires.end(); ++i)
     {
         if(!_icejs && i->first == "Ice")
         {
